version: '3'

services:
  db:
    hostname: db
    image: postgres:12
    build:
      context: .
      dockerfile: ./db_init/Dockerfile
    restart: always
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  3cxcdrtcpserver:
    image: 3cxcdrtcpserver
    hostname: 3cxtcpsrv
    build:
      context: .
      dockerfile: ./tcpsrv/Dockerfile
    restart: always
    command: bash -c "/wait && alembic upgrade head && python ./tcpsrv/runserver.py"
    #"while !</dev/tcp/db/5432; do sleep 1; done; alembic upgrade head && python ./tcpsrv/runserver.py"
    ports:
      - 5000:5000
    environment:
      - WAIT_HOSTS=${POSTGRES_SERVER}:${POSTGRES_PORT}
      - WAIT_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=30
      - WAIT_HOST_CONNECT_TIMEOUT=30
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}:${POSTGRES_PORT}/${POSTGRES_DB}
    env_file:
      - .env
    depends_on: 
      db: 
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    hostname: pgadmin4
    depends_on:
      - db
    ports:
      - 5555:80
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin/data

  grafana:
    image: grafana/grafana-oss
    depends_on:
      - db
    ports:
      - 3000:3000
    env_file:
      - .env
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana_init/provisioning/:/etc/grafana/provisioning/
      - ./grafana_init/provisioning/dashboards/dashboard_files/:/var/lib/grafana/dashboards/


volumes:
  pgdata: {}
  pgadmin_data: {}
  grafana-storage: {}


